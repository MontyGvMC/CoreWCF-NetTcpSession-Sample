//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference2
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpecialData", Namespace="http://schemas.datacontract.org/2004/07/SessionNetTcpServer.Services")]
    public partial class SpecialData : object
    {
        
        private string GUIDField;
        
        private int ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID
        {
            get
            {
                return this.GUIDField;
            }
            set
            {
                this.GUIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.ISpecialService")]
    public interface ISpecialService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpecialService/Increment", ReplyAction="http://tempuri.org/ISpecialService/IncrementResponse")]
        ServiceReference2.IncrementResponse Increment(ServiceReference2.IncrementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpecialService/Increment", ReplyAction="http://tempuri.org/ISpecialService/IncrementResponse")]
        System.Threading.Tasks.Task<ServiceReference2.IncrementResponse> IncrementAsync(ServiceReference2.IncrementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpecialService/Decrement", ReplyAction="http://tempuri.org/ISpecialService/DecrementResponse")]
        ServiceReference2.DecrementResponse Decrement(ServiceReference2.DecrementRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISpecialService/Decrement", ReplyAction="http://tempuri.org/ISpecialService/DecrementResponse")]
        System.Threading.Tasks.Task<ServiceReference2.DecrementResponse> DecrementAsync(ServiceReference2.DecrementRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Increment", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class IncrementRequest
    {
        
        public IncrementRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IncrementResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class IncrementResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public ServiceReference2.SpecialData IncrementResult;
        
        public IncrementResponse()
        {
        }
        
        public IncrementResponse(ServiceReference2.SpecialData IncrementResult)
        {
            this.IncrementResult = IncrementResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Decrement", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DecrementRequest
    {
        
        public DecrementRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DecrementResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DecrementResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public ServiceReference2.SpecialData DecrementResult;
        
        public DecrementResponse()
        {
        }
        
        public DecrementResponse(ServiceReference2.SpecialData DecrementResult)
        {
            this.DecrementResult = DecrementResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ISpecialServiceChannel : ServiceReference2.ISpecialService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class SpecialServiceClient : System.ServiceModel.ClientBase<ServiceReference2.ISpecialService>, ServiceReference2.ISpecialService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SpecialServiceClient() : 
                base(SpecialServiceClient.GetDefaultBinding(), SpecialServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISpecialService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SpecialServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(SpecialServiceClient.GetBindingForEndpoint(endpointConfiguration), SpecialServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SpecialServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SpecialServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SpecialServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SpecialServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SpecialServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ServiceReference2.IncrementResponse Increment(ServiceReference2.IncrementRequest request)
        {
            return base.Channel.Increment(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.IncrementResponse> IncrementAsync(ServiceReference2.IncrementRequest request)
        {
            return base.Channel.IncrementAsync(request);
        }
        
        public ServiceReference2.DecrementResponse Decrement(ServiceReference2.DecrementRequest request)
        {
            return base.Channel.Decrement(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.DecrementResponse> DecrementAsync(ServiceReference2.DecrementRequest request)
        {
            return base.Channel.DecrementAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISpecialService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISpecialService))
            {
                return new System.ServiceModel.EndpointAddress("http://[::]:5000/Special/basicHttp");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SpecialServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISpecialService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SpecialServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISpecialService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ISpecialService,
        }
    }
}
